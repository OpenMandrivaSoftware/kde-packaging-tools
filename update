#!/bin/sh
# Usage: update project version [startfrom]
#	project: Project to build (ls *.buildlist for available projects)
# 	version: Version to update to
#	startfrom: Package to start from (e.g. to continue where
#		a previous build left off because of a patch rebase
#		or file list issue)
#
# (C) 2015 Bernhard Rosenkr√§nzer <bero@lindev.ch>
# Released under the terms of the GPLv3

error() {
	echo "$1 failed to build -- please see above and fix."
	exit 1
}

if [ "$#" -lt 1 ]; then
	echo "Specify the version to update to"
	exit 1
fi

AFTER=false
PRERELEASE=false
BETA=""
while [ "$(echo $1 |cut -b1)" = "-" ]; do
	case $1 in
	-a|--after)
		AFTER=true
		;;
	-b|--beta)
		shift
		BETA="$1"
		;;
	-p|--prerelease)
		PRERELEASE=true
		;;
	*)
		echo "WARNING: Unknown option $1"
		;;
	esac
	shift
done

PROJECT="$1"
VERSION="$2"
PACKAGES="$(cat $(dirname $0)/$PROJECT.buildlist |grep -vE '^#' |sed -e 's,openmandriva/,,g')"
REALVERSION="${VERSION}"

if [ "$#" -ge 3 ]; then
	P=""
	RELEVANT=0
	for i in $PACKAGES; do
		if [ "$i" = "$3" ]; then
			RELEVANT=1
			if $AFTER; then
				continue
			fi
		fi
		[ "$RELEVANT" = "1" ] && P="$P $i"
	done
	PACKAGES="$P"
fi

for i in $PACKAGES; do
	rm -rf ${i}
	git clone git@github.com:OpenMandrivaAssociation/${i}.git || error $i
	cd ${i}
	OLDVERSION="$(grep -i '^Version[[:space:]]*:' *.spec |cut -d: -f2 |xargs echo)"
	OLDEXP="$(echo ${OLDVERSION} |sed -e 's,\.,\\.,g')"
	if grep -q "^%define beta " *.spec; then
		OLDBETA="$(cat *.spec |grep "^%define beta " |sed -e 's,^%define beta ,,')"
		if [ "${OLDBETA}" != "%{nil}" ]; then
			OLDEXP="${OLDEXP}-${OLDBETA}"
		fi
	fi
	sed -i -e "/${OLDEXP}\.tar/d" .abf.yml
	if [ "$PROJECT" = "qt" ]; then
		# Qt 5.10.0-beta2 changed tarball filenames... -beta2 is now only indicated in the directory
		sed -i -E 's,(%define qttarballdir .*)-%\{beta\},\1,' *.spec
	fi
	PKGVERSION=${VERSION}
	# PKGVERSION is a separate variable just in case we need to do
	# preprocessing here again (e.g. earlier versions of baloo didn't
	# follow KF's versioning scheme)
	[ "$i" = "kdelibs" ] && PKGVERSION=4.14.31
	if [ "$OLDVERSION" = "${PKGVERSION}" ]; then
		if grep -q '^%define beta' *.spec; then
			if [ -n "$BETA" ] && grep -q "^%define beta $BETA\$" *.spec; then
				echo "$i seems to be up to date already, skipping"
				cd ..
				continue
			elif grep -q '^%define beta %{nil}' *.spec; then
				echo "$i seems to be up to date already, skipping"
				cd ..
				continue
			fi
		else
			echo "$i seems to be up to date already, skipping"
			cd ..
			continue
		fi
	fi
	sed -i -e "s,^\(Version.*:.*\)${OLDEXP},\1${PKGVERSION}," *.spec
	sed -i -e "s,^\(Release.*:\s*\)[0-9]*,\11," *.spec
	sed -i -e "s,^\(Release.*:\s*\)[0-9]*\.%{beta}\.[0-9]*,\10.%{beta}.1," *.spec
	if [ -n "$BETA" ]; then
		sed -i -e "s,^%define beta .*,%define beta $BETA," *.spec
	else
		sed -i -e "s,^%define beta .*,%define beta %{nil}," *.spec
	fi
	# Let's update download URLs while at it...
	sed -i -e "s,ftp://ftp.kde.org/pub/kde,http://download.kde.org," *.spec
	#sed -i -e "s,stable/%{ver,stable/applications/%{ver," *.spec
	sudo urpmi --auto --no-verify-rpm --buildrequires *.spec
	if ${PRERELEASE}; then
		STABLE=stable
		[ $(echo $VERSION |cut -d. -f3) -ge 70 ] && STABLE=unstable
		SCPDIR=ftpopenmandriva@racnoss.kde.org:/srv/archives/ftp/${STABLE}
		if [ "${i}" = "oxygen-icons" ]; then
			TARNAME=${i}5
		elif [ "${i}" = "kgamma5" ]; then
			TARNAME=${i}
		else
			TARNAME=$(echo ${i} |sed -e 's,5$,,')
		fi
		if [ "${PROJECT}" = "kf" ]; then
			SCPDIR=$SCPDIR/frameworks/$(echo ${VERSION} |sed -e 's,\.0$,,')
			grep -q portingAids *.spec && SCPDIR="${SCPDIR}/portingAids"
		elif [ "${PROJECT}" = "pd" ]; then
			SCPDIR=$SCPDIR/plasma/${VERSION}
		elif [ "${PROJECT}" = "kapps" ]; then
			SCPDIR=$SCPDIR/applications/${VERSION}/src
		fi
		scp ${SCPDIR}/${TARNAME}-${PKGVERSION}.tar.xz . || :
	fi
	abb build || error $i
	[ -d RPMS/`uname -m` ] || [ -d RPMS/noarch ] || error $i
	if [ -n "$BETA" -a "$PROJECT" != "qt" ]; then
		PKGVERSION="${PKGVERSION}-${BETA}"
	fi
	abb store *-${PKGVERSION}.tar* || error $i
	git commit -am "Update to ${PKGVERSION}" || error $i
	git push origin master
	sudo urpmi --auto --no-verify-rpm RPMS/*/*.rpm
	cd ..
	VERSION="${REALVERSION}"
done

abf chain_build -b master --update-type enhancement -i $PROJECT.buildlist
